@page "/Login"
@using IdentityService.Web.BusinessLogic.Services.Login
@inject ILoginService loginService
@inject NavigationManager Navigation

<section class="hero is-primary is-fullheight">
  <div class="hero-body">
    <div class="container">
      <div class="columns is-centered">
        <div class="column is-5-tablet is-4-desktop is-3-widescreen">
          <form action="" class="box">
            <div class="field">
              <label for="" class="label">Username</label>
              <div class="control has-icons-left">
                <input value="@model.Username"
                                              @onchange="@((ChangeEventArgs __e) => model.Username = __e.Value.ToString())"
                                              class="input" />
                                       
                <span class="icon is-small is-left">
                  <i class="fa fa-envelope"></i>
                </span>
              </div>
            </div>
            <div class="field">
              <label for="" class="label">Password</label>
              <div class="control has-icons-left">
                 <input type="password" class="input" value="@model.Password"
                                                              @onchange="@((ChangeEventArgs __e) => model.Password = __e.Value.ToString())"/>
                                    
                 <span class="icon is-small is-left">
                  <i class="fa fa-lock"></i>
                </span>
              </div>
            </div>
            <div class="field">
              <label for="" class="checkbox">
                <input type="checkbox">
               Remember me
              </label>
            </div>
            <div class="field">
              <button class="button is-success" @onclick="() => {OnValidSubmit(); }">
                Login
              </button>
              <button class="btn btn-primary" @onclick="OnValidSubmit">Click me</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</section>



@code {
    private Models.Account.LoginModel model = new Models.Account.LoginModel();
    private bool loading = false; 

    
    private async void OnValidSubmit()
    {
    // reset alerts on submit
        //AlertService.Clear();
      
      
      

        loading = true;
        try
        {
          if (loginService.Login(model.Username, model.Password))
          {
            Navigation.NavigateTo("/");
          }
          
          
            /*await AccountService.Login(model);
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            NavigationManager.NavigateTo(returnUrl);*/
        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
    
}